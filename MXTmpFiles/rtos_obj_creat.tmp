#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n#t/* Create the queue(s) */
#t/* definition and creation of IMU_Queue */
#tosMessageQDef(IMU_Queue, 20, uint8_t);
#tIMU_QueueHandle = osMessageCreate(osMessageQ(IMU_Queue), NULL);
#n
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
#n#t/* Create the thread(s) */
#t/* definition and creation of defaultTask */
#tosThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
#tdefaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#n
#t/* definition and creation of debugtask */
#tosThreadDef(debugtask, Startdebug, osPriorityNormal, 0, 128);
#tdebugtaskHandle = osThreadCreate(osThread(debugtask), NULL);
#n
#t/* definition and creation of chassis */
#tosThreadDef(chassis, chassis_task, osPriorityNormal, 0, 512);
#tchassisHandle = osThreadCreate(osThread(chassis), NULL);
#n
#t/* definition and creation of track_task */
#tosThreadDef(track_task, track_scan, osPriorityHigh, 0, 128);
#ttrack_taskHandle = osThreadCreate(osThread(track_task), NULL);
#n
#t/* definition and creation of usmart_task */
#tosThreadDef(usmart_task, usmartscan, osPriorityLow, 0, 256);
#tusmart_taskHandle = osThreadCreate(osThread(usmart_task), NULL);
#n
#t/* definition and creation of avoid_obs */
#tosThreadDef(avoid_obs, avoid_task, osPriorityBelowNormal, 0, 128);
#tavoid_obsHandle = osThreadCreate(osThread(avoid_obs), NULL);
#n
#t/* definition and creation of imu_angle */
#tosThreadDef(imu_angle, IMU_decode, osPriorityAboveNormal, 0, 256);
#timu_angleHandle = osThreadCreate(osThread(imu_angle), NULL);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
